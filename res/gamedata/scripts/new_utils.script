-- ЧИТАЕТСЯ ИЗ ДВИЖКА

function devices_check_surge()
	if surge_manager.is_started() then

		local m = surge_manager.get_surge_manager()

		if m.blowout_sound then
			game.set_devices_psy_factor(game.get_devices_psy_factor() + 0.00075)
		end

		return true
	else
		game.set_devices_psy_factor(game.get_devices_psy_factor() - 0.0025)
		return false
	end
end

function remember_volume_status()
	_G.mus_vol = get_console():get_float("snd_volume_music")
	_G.amb_vol = get_console():get_float("snd_volume_eff")
end

function put_the_actor_to_sleep()
	local hours = tonumber(5)
	local minutes = tonumber(0)

	level.change_game_time(0,hours,minutes)
	level_weathers.get_weather_manager():forced_weather_change()
	surge_manager.get_surge_manager().time_forwarded = true

	xr_effects.disable_ui_only(db.actor, nil)
	db.actor.sleepeness = -0.5
	level.add_cam_effector("camera_effects\\surge_02.anm", 10, false, "new_utils.mind_loss_callback")
	level.add_pp_effector("surge_fade.ppe", 11, false)
	
	get_console():execute("snd_volume_music 0")
	get_console():execute("snd_volume_eff 0")	
end

function mind_loss_callback()
	level.add_cam_effector("camera_effects\\surge_01.anm", 10, false, "new_utils.mind_loss_callback2")
	local rnd = math.random(35,45)
	local m = surge_manager.get_surge_manager()
	if(m.started) then
		local tf = level.get_time_factor()
		local diff_sec = math.ceil(game.get_game_time():diffSec(m.inited_time)/tf)
		if(rnd>(m.surge_time-diff_sec)*tf/60) then
			m.time_forwarded = true
			m.ui_disabled = true
			m:end_surge()
		end
	end
	m = psi_storm_manager.get_psi_storm_manager()
	if(m and m.started) then
		local tf = level.get_time_factor()
		local diff_sec = math.ceil(game.get_game_time():diffSec(m.inited_time)/tf)
			if(rnd>(m.psi_storm_duration-diff_sec)*tf/60) then
			m.time_forwarded = true
			--m.ui_disabled = true
			m:finish()
		end
	end
	level.change_game_time(0,0,rnd)
	level_weathers.get_weather_manager():forced_weather_change()
	--printf("anabiotic_callback: time forwarded on [%d]", rnd)
end

function mind_loss_callback2()
	xr_effects.enable_ui(db.actor, nil)
    get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
end

function generate_phantoms()
	local phantom_idle = 0
	local phantom_time = 0
	local phantom_spawn_radius = 30.0
	local phantom_fov = 45
	local phantom_spawn_probability = 1
	local phantom_max = 5

	if phantom_idle == nil then
		phantom_idle = math.random(2000,5000)
	end
	if time_global() - phantom_time > phantom_idle then
		phantom_time				= time_global()
		phantom_idle = math.random(5000,10000)
		if math.random(0, 500) < phantom_spawn_probability then
			if phantom_manager:phantom_count() < phantom_max then
				local radius = phantom_spawn_radius * ( math.random()/2.0+0.5 )
				local ang    = phantom_fov * math.random() - phantom_fov * 0.5
				local dir    = vector_rotate_y( db.actor:direction(), ang )

				phantom_manager.spawn_phantom( db.actor:position():add( dir:mul(radius) ) )
			end
		end
	end
end

function act_h_s(sect, needed) -- actor_have_section -- Имеет ли актор опред. кол-во секций
	if not needed then
		needed = 1
	end
	local count = 0
	local function itr(actor, item) 
		if item:section() == sect then 
			count = count + 1 
		end 
	end
	db.actor:iterate_inventory(itr, db.actor)
	return count >= needed 
end

function act_d_h_s(sect, needed) -- actor_have_section -- Не имеет ли актор опред. кол-во секций
	if not needed then
		needed = 1
	end
	local count = 0
	local function itr(actor, item) 
		if item:section() == sect then 
			count = count + 1 
		end 
	end
	db.actor:iterate_inventory(itr, db.actor)
	return count < needed 
end

function act_h_m(count) -- actor_have_money  -- Имеет ли актор опред. кол-во денег
	return db.actor:money() >= count
end

function give_task(name)
	task_manager.get_task_manager():give_task(name)
end

function on_game_start()
	RegisterScriptCallback("actor_on_info_callback",remember_volume_status)	
end